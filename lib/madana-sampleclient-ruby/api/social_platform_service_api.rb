=begin
#madana-api

#<h1>Using the madana-api</h1>        <p>This documentation contains a Quickstart Guide, relating client functionality and information about the available         endpoints and used datamodels.   </p>       <p> The madana-api and its implementations are still in heavy development. This means that there may be problems in our protocols, or there may be mistakes in our implementations. We take security vulnerabilities very seriously. If you discover a security issue, please bring it to our attention right away! If you find a vulnerability that may affect live deployments -- for example, by exposing a remote execution exploit -- please send your report privately to info@madana.io. Please DO NOT file a public issue. If the issue is a protocol weakness that cannot be immediately exploited or something not yet deployed, just discuss it openly   </p>   <br>   <p> Note: Not all functionality might be acessible without having accquired and api-license token. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a> </p>       <br>

The version of the OpenAPI document: 0.4.14-master.16

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'cgi'

module   MadanaSampleclientRuby
  class SocialPlatformServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Used to Handle Incoming Webhooks from Facebook.
    # Used to Handle Incoming Webhooks from Facebook
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [File]
    def get_platforms(opts = {})
      data, _status_code, _headers = get_platforms_with_http_info(opts)
      data
    end

    # Used to Handle Incoming Webhooks from Facebook.
    # Used to Handle Incoming Webhooks from Facebook
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def get_platforms_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialPlatformServiceApi.get_platforms ...'
      end
      # resource path
      local_var_path = '/platforms'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialPlatformServiceApi#get_platforms\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used to Handle Incoming Webhooks from Facebook.
    # Used to Handle Incoming Webhooks from Facebook
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [File]
    def listen_twitter_webhook(opts = {})
      data, _status_code, _headers = listen_twitter_webhook_with_http_info(opts)
      data
    end

    # Used to Handle Incoming Webhooks from Facebook.
    # Used to Handle Incoming Webhooks from Facebook
    # @param [Hash] opts the optional parameters
    # @option opts [String] :body 
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def listen_twitter_webhook_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialPlatformServiceApi.listen_twitter_webhook ...'
      end
      # resource path
      local_var_path = '/platforms/twitter'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'body']) 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialPlatformServiceApi#listen_twitter_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Used to Handle Incoming Webhooks from Twitter.
    # Used to Handle Incoming Webhooks from Twitter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :crc_token 
    # @return [File]
    def register_twitter_webhook(opts = {})
      data, _status_code, _headers = register_twitter_webhook_with_http_info(opts)
      data
    end

    # Used to Handle Incoming Webhooks from Twitter.
    # Used to Handle Incoming Webhooks from Twitter
    # @param [Hash] opts the optional parameters
    # @option opts [String] :crc_token 
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def register_twitter_webhook_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialPlatformServiceApi.register_twitter_webhook ...'
      end
      # resource path
      local_var_path = '/platforms/twitter'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'crc_token'] = opts[:'crc_token'] if !opts[:'crc_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'File' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialPlatformServiceApi#register_twitter_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
