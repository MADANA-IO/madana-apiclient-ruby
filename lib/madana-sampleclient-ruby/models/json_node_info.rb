=begin
#madana-api

#<h1>API Quickstart Guide</h1>        <p>This documentation contains a Quickstart Guide, a few <a href=\"downloads.html\">sample clients</a>  for download and information about the available  <a href=\"resources.html\">endpoints</a>  and  <a href=\"data.html\">DataTypes</a>  </p>     <p>The <a target=\"_blank\" href=\"http://madana-explorer-staging.eu-central-1.elasticbeanstalk.com/login\">  MADANA Explorer</a> can be used to verify the interactions with the API</p>           <p>Internal use only. For more information visit <a href=\"https://www.madana.io\">www.madana.io</a></p>         <br> <br>

The version of the OpenAPI document: 0.4.12

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'date'

module   MadanaSampleclientRuby
  # 
  class JsonNodeInfo
    # 
    attr_accessor :hardware_baseboard

    # 
    attr_accessor :public_key

    # 
    attr_accessor :memory

    # 
    attr_accessor :processors

    # 
    attr_accessor :cpu_logical_count

    # 
    attr_accessor :connection_url

    # 
    attr_accessor :operating_system

    # 
    attr_accessor :cpu_physical_cores

    # 
    attr_accessor :status

    # 
    attr_accessor :operating_system_uptime

    # 
    attr_accessor :cpu_model

    # 
    attr_accessor :owner

    # 
    attr_accessor :cpu_family

    # 
    attr_accessor :cpu_frequency

    # 
    attr_accessor :hardware_firmware

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'hardware_baseboard' => :'hardwareBaseboard',
        :'public_key' => :'publicKey',
        :'memory' => :'memory',
        :'processors' => :'processors',
        :'cpu_logical_count' => :'cpuLogicalCount',
        :'connection_url' => :'connectionURL',
        :'operating_system' => :'operatingSystem',
        :'cpu_physical_cores' => :'cpuPhysicalCores',
        :'status' => :'status',
        :'operating_system_uptime' => :'operatingSystemUptime',
        :'cpu_model' => :'cpuModel',
        :'owner' => :'owner',
        :'cpu_family' => :'cpuFamily',
        :'cpu_frequency' => :'cpuFrequency',
        :'hardware_firmware' => :'hardwareFirmware'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'hardware_baseboard' => :'String',
        :'public_key' => :'String',
        :'memory' => :'String',
        :'processors' => :'Array<String>',
        :'cpu_logical_count' => :'Integer',
        :'connection_url' => :'String',
        :'operating_system' => :'String',
        :'cpu_physical_cores' => :'Integer',
        :'status' => :'String',
        :'operating_system_uptime' => :'Float',
        :'cpu_model' => :'String',
        :'owner' => :'String',
        :'cpu_family' => :'String',
        :'cpu_frequency' => :'String',
        :'hardware_firmware' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `  MadanaSampleclientRuby::JsonNodeInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `  MadanaSampleclientRuby::JsonNodeInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'hardware_baseboard')
        self.hardware_baseboard = attributes[:'hardware_baseboard']
      end

      if attributes.key?(:'public_key')
        self.public_key = attributes[:'public_key']
      end

      if attributes.key?(:'memory')
        self.memory = attributes[:'memory']
      end

      if attributes.key?(:'processors')
        if (value = attributes[:'processors']).is_a?(Array)
          self.processors = value
        end
      end

      if attributes.key?(:'cpu_logical_count')
        self.cpu_logical_count = attributes[:'cpu_logical_count']
      end

      if attributes.key?(:'connection_url')
        self.connection_url = attributes[:'connection_url']
      end

      if attributes.key?(:'operating_system')
        self.operating_system = attributes[:'operating_system']
      end

      if attributes.key?(:'cpu_physical_cores')
        self.cpu_physical_cores = attributes[:'cpu_physical_cores']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'operating_system_uptime')
        self.operating_system_uptime = attributes[:'operating_system_uptime']
      end

      if attributes.key?(:'cpu_model')
        self.cpu_model = attributes[:'cpu_model']
      end

      if attributes.key?(:'owner')
        self.owner = attributes[:'owner']
      end

      if attributes.key?(:'cpu_family')
        self.cpu_family = attributes[:'cpu_family']
      end

      if attributes.key?(:'cpu_frequency')
        self.cpu_frequency = attributes[:'cpu_frequency']
      end

      if attributes.key?(:'hardware_firmware')
        self.hardware_firmware = attributes[:'hardware_firmware']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          hardware_baseboard == o.hardware_baseboard &&
          public_key == o.public_key &&
          memory == o.memory &&
          processors == o.processors &&
          cpu_logical_count == o.cpu_logical_count &&
          connection_url == o.connection_url &&
          operating_system == o.operating_system &&
          cpu_physical_cores == o.cpu_physical_cores &&
          status == o.status &&
          operating_system_uptime == o.operating_system_uptime &&
          cpu_model == o.cpu_model &&
          owner == o.owner &&
          cpu_family == o.cpu_family &&
          cpu_frequency == o.cpu_frequency &&
          hardware_firmware == o.hardware_firmware
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [hardware_baseboard, public_key, memory, processors, cpu_logical_count, connection_url, operating_system, cpu_physical_cores, status, operating_system_uptime, cpu_model, owner, cpu_family, cpu_frequency, hardware_firmware].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
          MadanaSampleclientRuby.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
