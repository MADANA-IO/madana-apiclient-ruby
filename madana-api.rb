#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Com

module Madana

module Core

module Utils

  # (no documentation provided)
  class Environment 

    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :published
    # (no documentation provided)
    attr_accessor :roothash
    # (no documentation provided)
    attr_accessor :size
    # (no documentation provided)
    attr_accessor :defaultRunConfiguration
    # (no documentation provided)
    attr_accessor :ipfsHash
    # (no documentation provided)
    attr_accessor :packages
    # (no documentation provided)
    attr_accessor :rootHashOffset
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :uuid
    # (no documentation provided)
    attr_accessor :content

    # the json hash for this Environment
    def to_jaxb_json_hash
      _h = {}
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['published'] = published.to_jaxb_json_hash unless published.nil?
      _h['roothash'] = roothash.to_jaxb_json_hash unless roothash.nil?
      _h['size'] = size.to_jaxb_json_hash unless size.nil?
      _h['defaultRunConfiguration'] = defaultRunConfiguration.to_jaxb_json_hash unless defaultRunConfiguration.nil?
      _h['ipfsHash'] = ipfsHash.to_jaxb_json_hash unless ipfsHash.nil?
      if !packages.nil?
        _ha = Array.new
        packages.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['packages'] = _ha
      end
      _h['rootHashOffset'] = rootHashOffset.to_jaxb_json_hash unless rootHashOffset.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['uuid'] = uuid.to_jaxb_json_hash unless uuid.nil?
      if !content.nil?
        _ha = Array.new
        content.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['content'] = _ha
      end
      return _h
    end

    # the json (string form) for this Environment
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Environment with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['published'].nil?
          _oa = _o['published']
            if(_oa.is_a? Hash)
              @published = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @published =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @published = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @published.push Boolean.from_json(_item)
                 else
                   @published.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @published = _oa
            end
          end
        if !_o['roothash'].nil?
          _oa = _o['roothash']
            if(_oa.is_a? Hash)
              @roothash = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @roothash =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @roothash = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @roothash.push String.from_json(_item)
                 else
                   @roothash.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @roothash = _oa
            end
          end
        if !_o['size'].nil?
          _oa = _o['size']
            if(_oa.is_a? Hash)
              @size = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @size =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @size = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @size.push String.from_json(_item)
                 else
                   @size.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @size = _oa
            end
          end
        if !_o['defaultRunConfiguration'].nil?
          _oa = _o['defaultRunConfiguration']
            if(_oa.is_a? Hash)
              @defaultRunConfiguration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @defaultRunConfiguration =  Com::Madana::Core::Utils::Remotecontrol::RunConfig.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @defaultRunConfiguration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @defaultRunConfiguration.push Com::Madana::Core::Utils::Remotecontrol::RunConfig.from_json(_item)
                 else
                   @defaultRunConfiguration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @defaultRunConfiguration = _oa
            end
          end
        if !_o['ipfsHash'].nil?
          _oa = _o['ipfsHash']
            if(_oa.is_a? Hash)
              @ipfsHash = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ipfsHash =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ipfsHash = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ipfsHash.push String.from_json(_item)
                 else
                   @ipfsHash.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ipfsHash = _oa
            end
          end
        if !_o['packages'].nil?
          _oa = _o['packages']
            if(_oa.is_a? Hash)
              @packages = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @packages =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @packages = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @packages.push String.from_json(_item)
                 else
                   @packages.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @packages = _oa
            end
          end
        if !_o['rootHashOffset'].nil?
          _oa = _o['rootHashOffset']
            if(_oa.is_a? Hash)
              @rootHashOffset = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @rootHashOffset =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @rootHashOffset = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @rootHashOffset.push String.from_json(_item)
                 else
                   @rootHashOffset.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @rootHashOffset = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['uuid'].nil?
          _oa = _o['uuid']
            if(_oa.is_a? Hash)
              @uuid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uuid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uuid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uuid.push String.from_json(_item)
                 else
                   @uuid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uuid = _oa
            end
          end
        if !_o['content'].nil?
          _oa = _o['content']
            if(_oa.is_a? Hash)
              @content = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @content =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @content = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @content.push String.from_json(_item)
                 else
                   @content.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @content = _oa
            end
          end
    end

    # constructs a Environment from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Common

module Datastructures

  # (no documentation provided)
  class MDN_SocialUserObject 

    # (no documentation provided)
    attr_accessor :image
    # (no documentation provided)
    attr_accessor :platform
    # (no documentation provided)
    attr_accessor :ident

    # the json hash for this MDN_SocialUserObject
    def to_jaxb_json_hash
      _h = {}
      _h['image'] = image.to_jaxb_json_hash unless image.nil?
      _h['platform'] = platform.to_jaxb_json_hash unless platform.nil?
      _h['ident'] = ident.to_jaxb_json_hash unless ident.nil?
      return _h
    end

    # the json (string form) for this MDN_SocialUserObject
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MDN_SocialUserObject with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['image'].nil?
          _oa = _o['image']
            if(_oa.is_a? Hash)
              @image = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @image =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @image = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @image.push String.from_json(_item)
                 else
                   @image.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @image = _oa
            end
          end
        if !_o['platform'].nil?
          _oa = _o['platform']
            if(_oa.is_a? Hash)
              @platform = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @platform =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @platform = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @platform.push String.from_json(_item)
                 else
                   @platform.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @platform = _oa
            end
          end
        if !_o['ident'].nil?
          _oa = _o['ident']
            if(_oa.is_a? Hash)
              @ident = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ident =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ident = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ident.push String.from_json(_item)
                 else
                   @ident.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ident = _oa
            end
          end
    end

    # constructs a MDN_SocialUserObject from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Common

module Datastructures

  # (no documentation provided)
  class MDN_Data 

    # (no documentation provided)
    attr_accessor :data

    # the json hash for this MDN_Data
    def to_jaxb_json_hash
      _h = {}
      _h['data'] = data.to_jaxb_json_hash unless data.nil?
      return _h
    end

    # the json (string form) for this MDN_Data
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MDN_Data with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['data'].nil?
          _oa = _o['data']
            if(_oa.is_a? Hash)
              @data = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @data =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @data = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @data.push String.from_json(_item)
                 else
                   @data.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @data = _oa
            end
          end
    end

    # constructs a MDN_Data from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Core

module Utils

  # (no documentation provided)
  class EnvironmentPublishingRequest 

    # (no documentation provided)
    attr_accessor :description
    # (no documentation provided)
    attr_accessor :ipfsHash
    # (no documentation provided)
    attr_accessor :size
    # (no documentation provided)
    attr_accessor :isPublic
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :uuid
    # (no documentation provided)
    attr_accessor :content
    # (no documentation provided)
    attr_accessor :ipfsPrimaryPeer
    # (no documentation provided)
    attr_accessor :packages

    # the json hash for this EnvironmentPublishingRequest
    def to_jaxb_json_hash
      _h = {}
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      _h['ipfsHash'] = ipfsHash.to_jaxb_json_hash unless ipfsHash.nil?
      _h['size'] = size.to_jaxb_json_hash unless size.nil?
      _h['isPublic'] = isPublic.to_jaxb_json_hash unless isPublic.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['uuid'] = uuid.to_jaxb_json_hash unless uuid.nil?
      _h['content'] = content.to_jaxb_json_hash unless content.nil?
      _h['ipfsPrimaryPeer'] = ipfsPrimaryPeer.to_jaxb_json_hash unless ipfsPrimaryPeer.nil?
      _h['packages'] = packages.to_jaxb_json_hash unless packages.nil?
      return _h
    end

    # the json (string form) for this EnvironmentPublishingRequest
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EnvironmentPublishingRequest with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
        if !_o['ipfsHash'].nil?
          _oa = _o['ipfsHash']
            if(_oa.is_a? Hash)
              @ipfsHash = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ipfsHash =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ipfsHash = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ipfsHash.push String.from_json(_item)
                 else
                   @ipfsHash.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ipfsHash = _oa
            end
          end
        if !_o['size'].nil?
          _oa = _o['size']
            if(_oa.is_a? Hash)
              @size = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @size =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @size = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @size.push String.from_json(_item)
                 else
                   @size.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @size = _oa
            end
          end
        if !_o['isPublic'].nil?
          _oa = _o['isPublic']
            if(_oa.is_a? Hash)
              @isPublic = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @isPublic =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @isPublic = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @isPublic.push String.from_json(_item)
                 else
                   @isPublic.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @isPublic = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['uuid'].nil?
          _oa = _o['uuid']
            if(_oa.is_a? Hash)
              @uuid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @uuid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @uuid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @uuid.push String.from_json(_item)
                 else
                   @uuid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @uuid = _oa
            end
          end
        if !_o['content'].nil?
          _oa = _o['content']
            if(_oa.is_a? Hash)
              @content = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @content =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @content = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @content.push String.from_json(_item)
                 else
                   @content.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @content = _oa
            end
          end
        if !_o['ipfsPrimaryPeer'].nil?
          _oa = _o['ipfsPrimaryPeer']
            if(_oa.is_a? Hash)
              @ipfsPrimaryPeer = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ipfsPrimaryPeer =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ipfsPrimaryPeer = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ipfsPrimaryPeer.push String.from_json(_item)
                 else
                   @ipfsPrimaryPeer.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ipfsPrimaryPeer = _oa
            end
          end
        if !_o['packages'].nil?
          _oa = _o['packages']
            if(_oa.is_a? Hash)
              @packages = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @packages =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @packages = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @packages.push String.from_json(_item)
                 else
                   @packages.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @packages = _oa
            end
          end
    end

    # constructs a EnvironmentPublishingRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Common

module Datastructures

  # (no documentation provided)
  class MDN_Token 

    # (no documentation provided)
    attr_accessor :token

    # the json hash for this MDN_Token
    def to_jaxb_json_hash
      _h = {}
      _h['token'] = token.to_jaxb_json_hash unless token.nil?
      return _h
    end

    # the json (string form) for this MDN_Token
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MDN_Token with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['token'].nil?
          _oa = _o['token']
            if(_oa.is_a? Hash)
              @token = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @token =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @token = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @token.push String.from_json(_item)
                 else
                   @token.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @token = _oa
            end
          end
    end

    # constructs a MDN_Token from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Common

module Datastructures

  # (no documentation provided)
  class MDN_UserProfileImage 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :image

    # the json hash for this MDN_UserProfileImage
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['image'] = image.to_jaxb_json_hash unless image.nil?
      return _h
    end

    # the json (string form) for this MDN_UserProfileImage
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MDN_UserProfileImage with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['image'].nil?
          _oa = _o['image']
            if(_oa.is_a? Hash)
              @image = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @image =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @image = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @image.push String.from_json(_item)
                 else
                   @image.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @image = _oa
            end
          end
    end

    # constructs a MDN_UserProfileImage from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Common

module Datastructures

  # (no documentation provided)
  class MDN_MailAddress 

    # (no documentation provided)
    attr_accessor :mail

    # the json hash for this MDN_MailAddress
    def to_jaxb_json_hash
      _h = {}
      _h['mail'] = mail.to_jaxb_json_hash unless mail.nil?
      return _h
    end

    # the json (string form) for this MDN_MailAddress
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MDN_MailAddress with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['mail'].nil?
          _oa = _o['mail']
            if(_oa.is_a? Hash)
              @mail = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mail =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mail = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mail.push String.from_json(_item)
                 else
                   @mail.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mail = _oa
            end
          end
    end

    # constructs a MDN_MailAddress from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Core

module Utils

module Remotecontrol

  # (no documentation provided)
  class Disk_config 

    # (no documentation provided)
    attr_accessor :roothash
    # (no documentation provided)
    attr_accessor :disk
    # (no documentation provided)
    attr_accessor :roothash_offset
    # (no documentation provided)
    attr_accessor :readonly

    # the json hash for this Disk_config
    def to_jaxb_json_hash
      _h = {}
      _h['roothash'] = roothash.to_jaxb_json_hash unless roothash.nil?
      _h['disk'] = disk.to_jaxb_json_hash unless disk.nil?
      _h['roothash_offset'] = roothash_offset.to_jaxb_json_hash unless roothash_offset.nil?
      _h['readonly'] = readonly.to_jaxb_json_hash unless readonly.nil?
      return _h
    end

    # the json (string form) for this Disk_config
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Disk_config with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['roothash'].nil?
          _oa = _o['roothash']
            if(_oa.is_a? Hash)
              @roothash = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @roothash =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @roothash = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @roothash.push String.from_json(_item)
                 else
                   @roothash.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @roothash = _oa
            end
          end
        if !_o['disk'].nil?
          _oa = _o['disk']
            if(_oa.is_a? Hash)
              @disk = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @disk =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @disk = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @disk.push String.from_json(_item)
                 else
                   @disk.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @disk = _oa
            end
          end
        if !_o['roothash_offset'].nil?
          _oa = _o['roothash_offset']
            if(_oa.is_a? Hash)
              @roothash_offset = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @roothash_offset =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @roothash_offset = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @roothash_offset.push Fixnum.from_json(_item)
                 else
                   @roothash_offset.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @roothash_offset = _oa
            end
          end
        if !_o['readonly'].nil?
          _oa = _o['readonly']
            if(_oa.is_a? Hash)
              @readonly = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @readonly =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @readonly = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @readonly.push Boolean.from_json(_item)
                 else
                   @readonly.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @readonly = _oa
            end
          end
    end

    # constructs a Disk_config from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Com

module Madana

module Core

module Utils

  # (no documentation provided)
  class EnclaveRunningAttestation 

    # (no documentation provided)
    attr_accessor :enclaveProcess
    # (no documentation provided)
    attr_accessor :nodeInfo

    # the json hash for this EnclaveRunningAttestation
    def to_jaxb_json_hash
      _h = {}
      _h['enclaveProcess'] = enclaveProcess.to_jaxb_json_hash unless enclaveProcess.nil?
      _h['nodeInfo'] = nodeInfo.to_jaxb_json_hash unless nodeInfo.nil?
      return _h
    end

    # the json (string form) for this EnclaveRunningAttestation
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EnclaveRunningAttestation with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['enclaveProcess'].nil?
          _oa = _o['enclaveProcess']
            if(_oa.is_a? Hash)
              @enclaveProcess = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enclaveProcess =  Com::Madana::Core::Utils::EnclaveProcess.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enclaveProcess = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enclaveProcess.push Com::Madana::Core::Utils::EnclaveProcess.from_json(_item)
                 else
                   @enclaveProcess.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enclaveProcess = _oa
            end
          end
        if !_o['nodeInfo'].nil?
          _oa = _o['nodeInfo']
            if(_oa.is_a? Hash)
              @nodeInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @nodeInfo =  Com::Madana::Core::Utils::NodeInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @nodeInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @nodeInfo.push Com::Madana::Core::Utils::NodeInfo.from_json(_item)
                 else
                   @nodeInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @nodeInfo = _oa
            end
          end
    end

    # constructs a EnclaveRunningAttestation from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Java

module Lang

  # (no documentation provided)
  class Process 

    # (no documentation provided)
    attr_accessor :inputStream
    # (no documentation provided)
    attr_accessor :alive
    # (no documentation provided)
    attr_accessor :errorStream
    # (no documentation provided)
    attr_accessor :outputStream

    # the json hash for this Process
    def to_jaxb_json_hash
      _h = {}
      _h['inputStream'] = inputStream.to_jaxb_json_hash unless inputStream.nil?
      _h['alive'] = alive.to_jaxb_json_hash unless alive.nil?
      _h['errorStream'] = errorStream.to_jaxb_json_hash unless errorStream.nil?
      _h['outputStream'] = outputStream.to_jaxb_json_hash unless outputStream.nil?
      return _h
    end

    # the json (string form) for this Process
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this Process with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['inputStream'].nil?
          _oa = _o['inputStream']
            if(_oa.is_a? Hash)
              @inputStream = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @inputStream =  Java::Io::InputStream.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @inputStream = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @inputStream.push Java::Io::InputStream.from_json(_item)
                 else
                   @inputStream.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @inputStream = _oa
            end
          end
        if !_o['alive'].nil?
          _oa = _o['alive']
            if(_oa.is_a? Hash)
              @alive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @alive =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @alive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @alive.push Boolean.from_json(_item)
                 else
                   @alive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @alive = _oa
            end
          end
        if !_o['errorStream'].nil?
          _oa = _o['errorStream']
            if(_oa.is_a? Hash)
              @errorStream = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @errorStream =  Java::Io::InputStream.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @errorStream = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @errorStream.push Java::Io::InputStream.from_json(_item)
                 else
                   @errorStream.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @errorStream = _oa
            end
          end
        if !_o['outputStream'].nil?
          _oa = _o['outputStream']
            if(_oa.is_a? Hash)
              @outputStream = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @outputStream =  Java::Io::OutputStream.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @outputStream = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @outputStream.push Java::Io::OutputStream.from_json(_item)
                 else
                   @outputStream.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @outputStream = _oa
            end
          end
    end

    # constructs a Process from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Com

module Madana

module Common

module Datastructures

  # (no documentation provided)
  class MDN_Certificate 

    # (no documentation provided)
    attr_accessor :pem

    # the json hash for this MDN_Certificate
    def to_jaxb_json_hash
      _h = {}
      _h['pem'] = pem.to_jaxb_json_hash unless pem.nil?
      return _h
    end

    # the json (string form) for this MDN_Certificate
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MDN_Certificate with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['pem'].nil?
          _oa = _o['pem']
            if(_oa.is_a? Hash)
              @pem = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @pem =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @pem = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @pem.push String.from_json(_item)
                 else
                   @pem.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @pem = _oa
            end
          end
    end

    # constructs a MDN_Certificate from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Core

module Utils

module Enclave

  # (no documentation provided)
  class EnclaveRunRequest 

    # (no documentation provided)
    attr_accessor :environmentUUID
    # (no documentation provided)
    attr_accessor :enclaveExecutionType

    # the json hash for this EnclaveRunRequest
    def to_jaxb_json_hash
      _h = {}
      _h['environmentUUID'] = environmentUUID.to_jaxb_json_hash unless environmentUUID.nil?
      _h['enclaveExecutionType'] = enclaveExecutionType.to_jaxb_json_hash unless enclaveExecutionType.nil?
      return _h
    end

    # the json (string form) for this EnclaveRunRequest
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EnclaveRunRequest with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['environmentUUID'].nil?
          _oa = _o['environmentUUID']
            if(_oa.is_a? Hash)
              @environmentUUID = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @environmentUUID =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @environmentUUID = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @environmentUUID.push String.from_json(_item)
                 else
                   @environmentUUID.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @environmentUUID = _oa
            end
          end
        if !_o['enclaveExecutionType'].nil?
          _oa = _o['enclaveExecutionType']
            if(_oa.is_a? Hash)
              @enclaveExecutionType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enclaveExecutionType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enclaveExecutionType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enclaveExecutionType.push String.from_json(_item)
                 else
                   @enclaveExecutionType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enclaveExecutionType = _oa
            end
          end
    end

    # constructs a EnclaveRunRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Com

module Madana

module Core

module Utils

  # (no documentation provided)
  class SignedData 

    # (no documentation provided)
    attr_accessor :fingerpint
    # (no documentation provided)
    attr_accessor :signature
    # (no documentation provided)
    attr_accessor :data

    # the json hash for this SignedData
    def to_jaxb_json_hash
      _h = {}
      _h['fingerpint'] = fingerpint.to_jaxb_json_hash unless fingerpint.nil?
      _h['signature'] = signature.to_jaxb_json_hash unless signature.nil?
      _h['data'] = data.to_jaxb_json_hash unless data.nil?
      return _h
    end

    # the json (string form) for this SignedData
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this SignedData with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['fingerpint'].nil?
          _oa = _o['fingerpint']
            if(_oa.is_a? Hash)
              @fingerpint = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fingerpint =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fingerpint = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fingerpint.push String.from_json(_item)
                 else
                   @fingerpint.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fingerpint = _oa
            end
          end
        if !_o['signature'].nil?
          _oa = _o['signature']
            if(_oa.is_a? Hash)
              @signature = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signature =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signature = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signature.push String.from_json(_item)
                 else
                   @signature.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signature = _oa
            end
          end
        if !_o['data'].nil?
          _oa = _o['data']
            if(_oa.is_a? Hash)
              @data = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @data =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @data = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @data.push String.from_json(_item)
                 else
                   @data.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @data = _oa
            end
          end
    end

    # constructs a SignedData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Java

module Io

  # (no documentation provided)
  class InputStream 


    # the json hash for this InputStream
    def to_jaxb_json_hash
      _h = {}
      return _h
    end

    # the json (string form) for this InputStream
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this InputStream with a json hash
    def init_jaxb_json_hash(_o)
    end

    # constructs a InputStream from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Com

module Madana

module Core

module Utils

module Remotecontrol

  # (no documentation provided)
  class RunConfig 

    # (no documentation provided)
    attr_accessor :environment
    # (no documentation provided)
    attr_accessor :args
    # (no documentation provided)
    attr_accessor :run
    # (no documentation provided)
    attr_accessor :disk_config

    # the json hash for this RunConfig
    def to_jaxb_json_hash
      _h = {}
      _h['environment'] = environment.to_jaxb_json_hash unless environment.nil?
      if !args.nil?
        _ha = Array.new
        args.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['args'] = _ha
      end
      _h['run'] = run.to_jaxb_json_hash unless run.nil?
      if !disk_config.nil?
        _ha = Array.new
        disk_config.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['disk_config'] = _ha
      end
      return _h
    end

    # the json (string form) for this RunConfig
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this RunConfig with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['environment'].nil?
          _oa = _o['environment']
            if(_oa.is_a? Hash)
              @environment = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @environment =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @environment = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @environment.push Hash.from_json(_item)
                 else
                   @environment.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @environment = _oa
            end
          end
        if !_o['args'].nil?
          _oa = _o['args']
            if(_oa.is_a? Hash)
              @args = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @args =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @args = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @args.push String.from_json(_item)
                 else
                   @args.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @args = _oa
            end
          end
        if !_o['run'].nil?
          _oa = _o['run']
            if(_oa.is_a? Hash)
              @run = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @run =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @run = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @run.push String.from_json(_item)
                 else
                   @run.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @run = _oa
            end
          end
        if !_o['disk_config'].nil?
          _oa = _o['disk_config']
            if(_oa.is_a? Hash)
              @disk_config = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @disk_config =  Com::Madana::Core::Utils::Remotecontrol::Disk_config.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @disk_config = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @disk_config.push Com::Madana::Core::Utils::Remotecontrol::Disk_config.from_json(_item)
                 else
                   @disk_config.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @disk_config = _oa
            end
          end
    end

    # constructs a RunConfig from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Com

module Madana

module Common

module Datastructures

  # (no documentation provided)
  class MDN_PasswordReset 

    # (no documentation provided)
    attr_accessor :token
    # (no documentation provided)
    attr_accessor :mail
    # (no documentation provided)
    attr_accessor :password

    # the json hash for this MDN_PasswordReset
    def to_jaxb_json_hash
      _h = {}
      _h['token'] = token.to_jaxb_json_hash unless token.nil?
      _h['mail'] = mail.to_jaxb_json_hash unless mail.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      return _h
    end

    # the json (string form) for this MDN_PasswordReset
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MDN_PasswordReset with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['token'].nil?
          _oa = _o['token']
            if(_oa.is_a? Hash)
              @token = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @token =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @token = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @token.push String.from_json(_item)
                 else
                   @token.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @token = _oa
            end
          end
        if !_o['mail'].nil?
          _oa = _o['mail']
            if(_oa.is_a? Hash)
              @mail = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mail =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mail = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mail.push String.from_json(_item)
                 else
                   @mail.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mail = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
    end

    # constructs a MDN_PasswordReset from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Core

module Utils

  # (no documentation provided)
  class EnclaveProcess 

    # (no documentation provided)
    attr_accessor :remoteControlServer
    # (no documentation provided)
    attr_accessor :process
    # (no documentation provided)
    attr_accessor :signerIdent
    # (no documentation provided)
    attr_accessor :internalAttesationServer
    # (no documentation provided)
    attr_accessor :attestationServer
    # (no documentation provided)
    attr_accessor :internalRemoteControlServer
    # (no documentation provided)
    attr_accessor :wgInterface
    # (no documentation provided)
    attr_accessor :endingTime
    # (no documentation provided)
    attr_accessor :environment
    # (no documentation provided)
    attr_accessor :internalIdent
    # (no documentation provided)
    attr_accessor :consoleOutput
    # (no documentation provided)
    attr_accessor :wireguardPublicKey
    # (no documentation provided)
    attr_accessor :startupTime
    # (no documentation provided)
    attr_accessor :enclaveIdent
    # (no documentation provided)
    attr_accessor :status

    # the json hash for this EnclaveProcess
    def to_jaxb_json_hash
      _h = {}
      _h['remoteControlServer'] = remoteControlServer.to_jaxb_json_hash unless remoteControlServer.nil?
      _h['process'] = process.to_jaxb_json_hash unless process.nil?
      _h['signerIdent'] = signerIdent.to_jaxb_json_hash unless signerIdent.nil?
      _h['internalAttesationServer'] = internalAttesationServer.to_jaxb_json_hash unless internalAttesationServer.nil?
      _h['attestationServer'] = attestationServer.to_jaxb_json_hash unless attestationServer.nil?
      _h['internalRemoteControlServer'] = internalRemoteControlServer.to_jaxb_json_hash unless internalRemoteControlServer.nil?
      _h['wgInterface'] = wgInterface.to_jaxb_json_hash unless wgInterface.nil?
      _h['endingTime'] = endingTime.to_jaxb_json_hash unless endingTime.nil?
      _h['environment'] = environment.to_jaxb_json_hash unless environment.nil?
      _h['internalIdent'] = internalIdent.to_jaxb_json_hash unless internalIdent.nil?
      _h['consoleOutput'] = consoleOutput.to_jaxb_json_hash unless consoleOutput.nil?
      _h['wireguardPublicKey'] = wireguardPublicKey.to_jaxb_json_hash unless wireguardPublicKey.nil?
      _h['startupTime'] = startupTime.to_jaxb_json_hash unless startupTime.nil?
      _h['enclaveIdent'] = enclaveIdent.to_jaxb_json_hash unless enclaveIdent.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      return _h
    end

    # the json (string form) for this EnclaveProcess
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this EnclaveProcess with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['remoteControlServer'].nil?
          _oa = _o['remoteControlServer']
            if(_oa.is_a? Hash)
              @remoteControlServer = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @remoteControlServer =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @remoteControlServer = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @remoteControlServer.push String.from_json(_item)
                 else
                   @remoteControlServer.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @remoteControlServer = _oa
            end
          end
        if !_o['process'].nil?
          _oa = _o['process']
            if(_oa.is_a? Hash)
              @process = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @process =  Java::Lang::Process.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @process = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @process.push Java::Lang::Process.from_json(_item)
                 else
                   @process.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @process = _oa
            end
          end
        if !_o['signerIdent'].nil?
          _oa = _o['signerIdent']
            if(_oa.is_a? Hash)
              @signerIdent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @signerIdent =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @signerIdent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @signerIdent.push String.from_json(_item)
                 else
                   @signerIdent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @signerIdent = _oa
            end
          end
        if !_o['internalAttesationServer'].nil?
          _oa = _o['internalAttesationServer']
            if(_oa.is_a? Hash)
              @internalAttesationServer = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @internalAttesationServer =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @internalAttesationServer = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @internalAttesationServer.push String.from_json(_item)
                 else
                   @internalAttesationServer.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @internalAttesationServer = _oa
            end
          end
        if !_o['attestationServer'].nil?
          _oa = _o['attestationServer']
            if(_oa.is_a? Hash)
              @attestationServer = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @attestationServer =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @attestationServer = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @attestationServer.push String.from_json(_item)
                 else
                   @attestationServer.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @attestationServer = _oa
            end
          end
        if !_o['internalRemoteControlServer'].nil?
          _oa = _o['internalRemoteControlServer']
            if(_oa.is_a? Hash)
              @internalRemoteControlServer = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @internalRemoteControlServer =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @internalRemoteControlServer = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @internalRemoteControlServer.push String.from_json(_item)
                 else
                   @internalRemoteControlServer.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @internalRemoteControlServer = _oa
            end
          end
        if !_o['wgInterface'].nil?
          _oa = _o['wgInterface']
            if(_oa.is_a? Hash)
              @wgInterface = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @wgInterface =  Com::Madana::Core::Utils::WireguardInterface.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @wgInterface = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @wgInterface.push Com::Madana::Core::Utils::WireguardInterface.from_json(_item)
                 else
                   @wgInterface.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @wgInterface = _oa
            end
          end
        if !_o['endingTime'].nil?
          _oa = _o['endingTime']
            if(_oa.is_a? Hash)
              @endingTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @endingTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @endingTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @endingTime.push String.from_json(_item)
                 else
                   @endingTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @endingTime = _oa
            end
          end
        if !_o['environment'].nil?
          _oa = _o['environment']
            if(_oa.is_a? Hash)
              @environment = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @environment =  Com::Madana::Core::Utils::Environment.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @environment = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @environment.push Com::Madana::Core::Utils::Environment.from_json(_item)
                 else
                   @environment.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @environment = _oa
            end
          end
        if !_o['internalIdent'].nil?
          _oa = _o['internalIdent']
            if(_oa.is_a? Hash)
              @internalIdent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @internalIdent =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @internalIdent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @internalIdent.push String.from_json(_item)
                 else
                   @internalIdent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @internalIdent = _oa
            end
          end
        if !_o['consoleOutput'].nil?
          _oa = _o['consoleOutput']
            if(_oa.is_a? Hash)
              @consoleOutput = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @consoleOutput =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @consoleOutput = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @consoleOutput.push String.from_json(_item)
                 else
                   @consoleOutput.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @consoleOutput = _oa
            end
          end
        if !_o['wireguardPublicKey'].nil?
          _oa = _o['wireguardPublicKey']
            if(_oa.is_a? Hash)
              @wireguardPublicKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @wireguardPublicKey =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @wireguardPublicKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @wireguardPublicKey.push String.from_json(_item)
                 else
                   @wireguardPublicKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @wireguardPublicKey = _oa
            end
          end
        if !_o['startupTime'].nil?
          _oa = _o['startupTime']
            if(_oa.is_a? Hash)
              @startupTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @startupTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @startupTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @startupTime.push String.from_json(_item)
                 else
                   @startupTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @startupTime = _oa
            end
          end
        if !_o['enclaveIdent'].nil?
          _oa = _o['enclaveIdent']
            if(_oa.is_a? Hash)
              @enclaveIdent = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enclaveIdent =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enclaveIdent = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enclaveIdent.push String.from_json(_item)
                 else
                   @enclaveIdent.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enclaveIdent = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
    end

    # constructs a EnclaveProcess from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Common

module Datastructures

  # (no documentation provided)
  class MDN_Setting 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :description

    # the json hash for this MDN_Setting
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['description'] = description.to_jaxb_json_hash unless description.nil?
      return _h
    end

    # the json (string form) for this MDN_Setting
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MDN_Setting with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['description'].nil?
          _oa = _o['description']
            if(_oa.is_a? Hash)
              @description = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @description =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @description = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @description.push String.from_json(_item)
                 else
                   @description.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @description = _oa
            end
          end
    end

    # constructs a MDN_Setting from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Java

module Io

  # (no documentation provided)
  class OutputStream 


    # the json hash for this OutputStream
    def to_jaxb_json_hash
      _h = {}
      return _h
    end

    # the json (string form) for this OutputStream
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this OutputStream with a json hash
    def init_jaxb_json_hash(_o)
    end

    # constructs a OutputStream from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

module Com

module Madana

module Core

module Utils

  # (no documentation provided)
  class IPFSSystemInfo 

    # (no documentation provided)
    attr_accessor :swarmConnection
    # (no documentation provided)
    attr_accessor :publicKey
    # (no documentation provided)
    attr_accessor :protocolVersion
    # (no documentation provided)
    attr_accessor :agentVersion
    # (no documentation provided)
    attr_accessor :id

    # the json hash for this IPFSSystemInfo
    def to_jaxb_json_hash
      _h = {}
      _h['swarmConnection'] = swarmConnection.to_jaxb_json_hash unless swarmConnection.nil?
      _h['publicKey'] = publicKey.to_jaxb_json_hash unless publicKey.nil?
      _h['protocolVersion'] = protocolVersion.to_jaxb_json_hash unless protocolVersion.nil?
      _h['agentVersion'] = agentVersion.to_jaxb_json_hash unless agentVersion.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      return _h
    end

    # the json (string form) for this IPFSSystemInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this IPFSSystemInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['swarmConnection'].nil?
          _oa = _o['swarmConnection']
            if(_oa.is_a? Hash)
              @swarmConnection = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @swarmConnection =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @swarmConnection = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @swarmConnection.push String.from_json(_item)
                 else
                   @swarmConnection.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @swarmConnection = _oa
            end
          end
        if !_o['publicKey'].nil?
          _oa = _o['publicKey']
            if(_oa.is_a? Hash)
              @publicKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @publicKey =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @publicKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @publicKey.push String.from_json(_item)
                 else
                   @publicKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @publicKey = _oa
            end
          end
        if !_o['protocolVersion'].nil?
          _oa = _o['protocolVersion']
            if(_oa.is_a? Hash)
              @protocolVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @protocolVersion =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @protocolVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @protocolVersion.push String.from_json(_item)
                 else
                   @protocolVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @protocolVersion = _oa
            end
          end
        if !_o['agentVersion'].nil?
          _oa = _o['agentVersion']
            if(_oa.is_a? Hash)
              @agentVersion = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @agentVersion =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @agentVersion = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @agentVersion.push String.from_json(_item)
                 else
                   @agentVersion.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @agentVersion = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
    end

    # constructs a IPFSSystemInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Common

module Datastructures

  # (no documentation provided)
  class MDN_OAuthToken 

    # (no documentation provided)
    attr_accessor :verifier
    # (no documentation provided)
    attr_accessor :token

    # the json hash for this MDN_OAuthToken
    def to_jaxb_json_hash
      _h = {}
      _h['verifier'] = verifier.to_jaxb_json_hash unless verifier.nil?
      _h['token'] = token.to_jaxb_json_hash unless token.nil?
      return _h
    end

    # the json (string form) for this MDN_OAuthToken
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MDN_OAuthToken with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['verifier'].nil?
          _oa = _o['verifier']
            if(_oa.is_a? Hash)
              @verifier = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @verifier =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @verifier = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @verifier.push String.from_json(_item)
                 else
                   @verifier.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @verifier = _oa
            end
          end
        if !_o['token'].nil?
          _oa = _o['token']
            if(_oa.is_a? Hash)
              @token = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @token =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @token = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @token.push String.from_json(_item)
                 else
                   @token.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @token = _oa
            end
          end
    end

    # constructs a MDN_OAuthToken from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Common

module Datastructures

  # (no documentation provided)
  class MDN_UserCredentials 

    # (no documentation provided)
    attr_accessor :username
    # (no documentation provided)
    attr_accessor :password

    # the json hash for this MDN_UserCredentials
    def to_jaxb_json_hash
      _h = {}
      _h['username'] = username.to_jaxb_json_hash unless username.nil?
      _h['password'] = password.to_jaxb_json_hash unless password.nil?
      return _h
    end

    # the json (string form) for this MDN_UserCredentials
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MDN_UserCredentials with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['username'].nil?
          _oa = _o['username']
            if(_oa.is_a? Hash)
              @username = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @username =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @username = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @username.push String.from_json(_item)
                 else
                   @username.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @username = _oa
            end
          end
        if !_o['password'].nil?
          _oa = _o['password']
            if(_oa.is_a? Hash)
              @password = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @password =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @password = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @password.push String.from_json(_item)
                 else
                   @password.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @password = _oa
            end
          end
    end

    # constructs a MDN_UserCredentials from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Core

module Utils

  # (no documentation provided)
  class NetworkInterface 

    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :address

    # the json hash for this NetworkInterface
    def to_jaxb_json_hash
      _h = {}
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['address'] = address.to_jaxb_json_hash unless address.nil?
      return _h
    end

    # the json (string form) for this NetworkInterface
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this NetworkInterface with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['address'].nil?
          _oa = _o['address']
            if(_oa.is_a? Hash)
              @address = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @address =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @address = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @address.push String.from_json(_item)
                 else
                   @address.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @address = _oa
            end
          end
    end

    # constructs a NetworkInterface from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Common

module Datastructures

  # (no documentation provided)
  class MDN_A_UserObject 

    # (no documentation provided)
    attr_accessor :created
    # (no documentation provided)
    attr_accessor :activated
    # (no documentation provided)
    attr_accessor :lastActive
    # (no documentation provided)
    attr_accessor :image
    # (no documentation provided)
    attr_accessor :userName

    # the json hash for this MDN_A_UserObject
    def to_jaxb_json_hash
      _h = {}
      _h['created'] = created.to_jaxb_json_hash unless created.nil?
      _h['activated'] = activated.to_jaxb_json_hash unless activated.nil?
      _h['lastActive'] = lastActive.to_jaxb_json_hash unless lastActive.nil?
      _h['image'] = image.to_jaxb_json_hash unless image.nil?
      _h['userName'] = userName.to_jaxb_json_hash unless userName.nil?
      return _h
    end

    # the json (string form) for this MDN_A_UserObject
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this MDN_A_UserObject with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['created'].nil?
          _oa = _o['created']
            if(_oa.is_a? Hash)
              @created = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @created =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @created = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @created.push String.from_json(_item)
                 else
                   @created.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @created = _oa
            end
          end
        if !_o['activated'].nil?
          _oa = _o['activated']
            if(_oa.is_a? Hash)
              @activated = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @activated =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @activated = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @activated.push String.from_json(_item)
                 else
                   @activated.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @activated = _oa
            end
          end
        if !_o['lastActive'].nil?
          _oa = _o['lastActive']
            if(_oa.is_a? Hash)
              @lastActive = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastActive =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastActive = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastActive.push String.from_json(_item)
                 else
                   @lastActive.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastActive = _oa
            end
          end
        if !_o['image'].nil?
          _oa = _o['image']
            if(_oa.is_a? Hash)
              @image = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @image =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @image = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @image.push String.from_json(_item)
                 else
                   @image.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @image = _oa
            end
          end
        if !_o['userName'].nil?
          _oa = _o['userName']
            if(_oa.is_a? Hash)
              @userName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @userName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @userName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @userName.push String.from_json(_item)
                 else
                   @userName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @userName = _oa
            end
          end
    end

    # constructs a MDN_A_UserObject from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Core

module Utils

  # (no documentation provided)
  class NodeInfo 

    # (no documentation provided)
    attr_accessor :cpuModel
    # (no documentation provided)
    attr_accessor :hardwareFirmware
    # (no documentation provided)
    attr_accessor :cpuFamily
    # (no documentation provided)
    attr_accessor :memory
    # (no documentation provided)
    attr_accessor :cpuLogicalCount
    # (no documentation provided)
    attr_accessor :hardwareBaseboard
    # (no documentation provided)
    attr_accessor :operatingSystem
    # (no documentation provided)
    attr_accessor :publicKey
    # (no documentation provided)
    attr_accessor :processors
    # (no documentation provided)
    attr_accessor :ipfsInfo
    # (no documentation provided)
    attr_accessor :cpuFrequency
    # (no documentation provided)
    attr_accessor :operatingSystemUptime
    # (no documentation provided)
    attr_accessor :owner
    # (no documentation provided)
    attr_accessor :cpuPhysicalCores
    # (no documentation provided)
    attr_accessor :status
    # (no documentation provided)
    attr_accessor :connectionURL

    # the json hash for this NodeInfo
    def to_jaxb_json_hash
      _h = {}
      _h['cpuModel'] = cpuModel.to_jaxb_json_hash unless cpuModel.nil?
      _h['hardwareFirmware'] = hardwareFirmware.to_jaxb_json_hash unless hardwareFirmware.nil?
      _h['cpuFamily'] = cpuFamily.to_jaxb_json_hash unless cpuFamily.nil?
      _h['memory'] = memory.to_jaxb_json_hash unless memory.nil?
      _h['cpuLogicalCount'] = cpuLogicalCount.to_jaxb_json_hash unless cpuLogicalCount.nil?
      _h['hardwareBaseboard'] = hardwareBaseboard.to_jaxb_json_hash unless hardwareBaseboard.nil?
      _h['operatingSystem'] = operatingSystem.to_jaxb_json_hash unless operatingSystem.nil?
      _h['publicKey'] = publicKey.to_jaxb_json_hash unless publicKey.nil?
      if !processors.nil?
        _ha = Array.new
        processors.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['processors'] = _ha
      end
      _h['ipfsInfo'] = ipfsInfo.to_jaxb_json_hash unless ipfsInfo.nil?
      _h['cpuFrequency'] = cpuFrequency.to_jaxb_json_hash unless cpuFrequency.nil?
      _h['operatingSystemUptime'] = operatingSystemUptime.to_jaxb_json_hash unless operatingSystemUptime.nil?
      _h['owner'] = owner.to_jaxb_json_hash unless owner.nil?
      _h['cpuPhysicalCores'] = cpuPhysicalCores.to_jaxb_json_hash unless cpuPhysicalCores.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      _h['connectionURL'] = connectionURL.to_jaxb_json_hash unless connectionURL.nil?
      return _h
    end

    # the json (string form) for this NodeInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this NodeInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['cpuModel'].nil?
          _oa = _o['cpuModel']
            if(_oa.is_a? Hash)
              @cpuModel = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cpuModel =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cpuModel = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cpuModel.push String.from_json(_item)
                 else
                   @cpuModel.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cpuModel = _oa
            end
          end
        if !_o['hardwareFirmware'].nil?
          _oa = _o['hardwareFirmware']
            if(_oa.is_a? Hash)
              @hardwareFirmware = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hardwareFirmware =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hardwareFirmware = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hardwareFirmware.push String.from_json(_item)
                 else
                   @hardwareFirmware.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hardwareFirmware = _oa
            end
          end
        if !_o['cpuFamily'].nil?
          _oa = _o['cpuFamily']
            if(_oa.is_a? Hash)
              @cpuFamily = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cpuFamily =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cpuFamily = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cpuFamily.push String.from_json(_item)
                 else
                   @cpuFamily.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cpuFamily = _oa
            end
          end
        if !_o['memory'].nil?
          _oa = _o['memory']
            if(_oa.is_a? Hash)
              @memory = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @memory =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @memory = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @memory.push String.from_json(_item)
                 else
                   @memory.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @memory = _oa
            end
          end
        if !_o['cpuLogicalCount'].nil?
          _oa = _o['cpuLogicalCount']
            if(_oa.is_a? Hash)
              @cpuLogicalCount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cpuLogicalCount =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cpuLogicalCount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cpuLogicalCount.push Fixnum.from_json(_item)
                 else
                   @cpuLogicalCount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cpuLogicalCount = _oa
            end
          end
        if !_o['hardwareBaseboard'].nil?
          _oa = _o['hardwareBaseboard']
            if(_oa.is_a? Hash)
              @hardwareBaseboard = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @hardwareBaseboard =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @hardwareBaseboard = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @hardwareBaseboard.push String.from_json(_item)
                 else
                   @hardwareBaseboard.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @hardwareBaseboard = _oa
            end
          end
        if !_o['operatingSystem'].nil?
          _oa = _o['operatingSystem']
            if(_oa.is_a? Hash)
              @operatingSystem = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @operatingSystem =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @operatingSystem = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @operatingSystem.push String.from_json(_item)
                 else
                   @operatingSystem.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @operatingSystem = _oa
            end
          end
        if !_o['publicKey'].nil?
          _oa = _o['publicKey']
            if(_oa.is_a? Hash)
              @publicKey = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @publicKey =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @publicKey = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @publicKey.push String.from_json(_item)
                 else
                   @publicKey.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @publicKey = _oa
            end
          end
        if !_o['processors'].nil?
          _oa = _o['processors']
            if(_oa.is_a? Hash)
              @processors = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @processors =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @processors = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @processors.push String.from_json(_item)
                 else
                   @processors.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @processors = _oa
            end
          end
        if !_o['ipfsInfo'].nil?
          _oa = _o['ipfsInfo']
            if(_oa.is_a? Hash)
              @ipfsInfo = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ipfsInfo =  Com::Madana::Core::Utils::IPFSSystemInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ipfsInfo = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ipfsInfo.push Com::Madana::Core::Utils::IPFSSystemInfo.from_json(_item)
                 else
                   @ipfsInfo.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ipfsInfo = _oa
            end
          end
        if !_o['cpuFrequency'].nil?
          _oa = _o['cpuFrequency']
            if(_oa.is_a? Hash)
              @cpuFrequency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cpuFrequency =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cpuFrequency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cpuFrequency.push String.from_json(_item)
                 else
                   @cpuFrequency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cpuFrequency = _oa
            end
          end
        if !_o['operatingSystemUptime'].nil?
          _oa = _o['operatingSystemUptime']
            if(_oa.is_a? Hash)
              @operatingSystemUptime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @operatingSystemUptime =  Bignum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @operatingSystemUptime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @operatingSystemUptime.push Bignum.from_json(_item)
                 else
                   @operatingSystemUptime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @operatingSystemUptime = _oa
            end
          end
        if !_o['owner'].nil?
          _oa = _o['owner']
            if(_oa.is_a? Hash)
              @owner = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @owner =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @owner = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @owner.push String.from_json(_item)
                 else
                   @owner.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @owner = _oa
            end
          end
        if !_o['cpuPhysicalCores'].nil?
          _oa = _o['cpuPhysicalCores']
            if(_oa.is_a? Hash)
              @cpuPhysicalCores = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cpuPhysicalCores =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cpuPhysicalCores = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cpuPhysicalCores.push Fixnum.from_json(_item)
                 else
                   @cpuPhysicalCores.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cpuPhysicalCores = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
        if !_o['connectionURL'].nil?
          _oa = _o['connectionURL']
            if(_oa.is_a? Hash)
              @connectionURL = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @connectionURL =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @connectionURL = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @connectionURL.push String.from_json(_item)
                 else
                   @connectionURL.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @connectionURL = _oa
            end
          end
    end

    # constructs a NodeInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Core

module Utils

  # (no documentation provided)
  class WireguardInterface < Com::Madana::Core::Utils::NetworkInterface 

    # (no documentation provided)
    attr_accessor :port

    # the json hash for this WireguardInterface
    def to_jaxb_json_hash
      _h = super
      _h['port'] = port.to_jaxb_json_hash unless port.nil?
      return _h
    end

    #initializes this WireguardInterface with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['port'].nil?
          _oa = _o['port']
            if(_oa.is_a? Hash)
              @port = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @port =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @port = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @port.push String.from_json(_item)
                 else
                   @port.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @port = _oa
            end
          end
    end

    # constructs a WireguardInterface from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Common

module Datastructures

  # (no documentation provided)
  class MDN_User < Com::Madana::Common::Datastructures::MDN_A_UserObject 

    # (no documentation provided)
    attr_accessor :socialAccounts
    # (no documentation provided)
    attr_accessor :firstName
    # (no documentation provided)
    attr_accessor :settings
    # (no documentation provided)
    attr_accessor :guid
    # (no documentation provided)
    attr_accessor :lastName
    # (no documentation provided)
    attr_accessor :mail
    # (no documentation provided)
    attr_accessor :credentials

    # the json hash for this MDN_User
    def to_jaxb_json_hash
      _h = super
      if !socialAccounts.nil?
        _ha = Array.new
        socialAccounts.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['socialAccounts'] = _ha
      end
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      if !settings.nil?
        _ha = Array.new
        settings.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['settings'] = _ha
      end
      _h['guid'] = guid.to_jaxb_json_hash unless guid.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['mail'] = mail.to_jaxb_json_hash unless mail.nil?
      _h['credentials'] = credentials.to_jaxb_json_hash unless credentials.nil?
      return _h
    end

    #initializes this MDN_User with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['socialAccounts'].nil?
          _oa = _o['socialAccounts']
            if(_oa.is_a? Hash)
              @socialAccounts = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @socialAccounts =  Com::Madana::Common::Datastructures::MDN_SocialUserObject.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @socialAccounts = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @socialAccounts.push Com::Madana::Common::Datastructures::MDN_SocialUserObject.from_json(_item)
                 else
                   @socialAccounts.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @socialAccounts = _oa
            end
          end
        if !_o['firstName'].nil?
          _oa = _o['firstName']
            if(_oa.is_a? Hash)
              @firstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstName.push String.from_json(_item)
                 else
                   @firstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstName = _oa
            end
          end
        if !_o['settings'].nil?
          _oa = _o['settings']
            if(_oa.is_a? Hash)
              @settings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @settings =  Com::Madana::Common::Datastructures::MDN_UserSetting.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @settings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @settings.push Com::Madana::Common::Datastructures::MDN_UserSetting.from_json(_item)
                 else
                   @settings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @settings = _oa
            end
          end
        if !_o['guid'].nil?
          _oa = _o['guid']
            if(_oa.is_a? Hash)
              @guid = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @guid =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @guid = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @guid.push String.from_json(_item)
                 else
                   @guid.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @guid = _oa
            end
          end
        if !_o['lastName'].nil?
          _oa = _o['lastName']
            if(_oa.is_a? Hash)
              @lastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastName.push String.from_json(_item)
                 else
                   @lastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastName = _oa
            end
          end
        if !_o['mail'].nil?
          _oa = _o['mail']
            if(_oa.is_a? Hash)
              @mail = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mail =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mail = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mail.push String.from_json(_item)
                 else
                   @mail.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mail = _oa
            end
          end
        if !_o['credentials'].nil?
          _oa = _o['credentials']
            if(_oa.is_a? Hash)
              @credentials = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @credentials =  Com::Madana::Common::Datastructures::MDN_UserCredentials.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @credentials = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @credentials.push Com::Madana::Common::Datastructures::MDN_UserCredentials.from_json(_item)
                 else
                   @credentials.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @credentials = _oa
            end
          end
    end

    # constructs a MDN_User from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Core

module Utils

  # (no documentation provided)
  class EnclaveRunningAttestationApproval < Com::Madana::Core::Utils::EnclaveRunningAttestation 

    # (no documentation provided)
    attr_accessor :approved

    # the json hash for this EnclaveRunningAttestationApproval
    def to_jaxb_json_hash
      _h = super
      _h['approved'] = approved.to_jaxb_json_hash unless approved.nil?
      return _h
    end

    #initializes this EnclaveRunningAttestationApproval with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['approved'].nil?
          _oa = _o['approved']
            if(_oa.is_a? Hash)
              @approved = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @approved =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @approved = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @approved.push String.from_json(_item)
                 else
                   @approved.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @approved = _oa
            end
          end
    end

    # constructs a EnclaveRunningAttestationApproval from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

module Com

module Madana

module Common

module Datastructures

  # (no documentation provided)
  class MDN_UserSetting < Com::Madana::Common::Datastructures::MDN_Setting 

    # (no documentation provided)
    attr_accessor :value

    # the json hash for this MDN_UserSetting
    def to_jaxb_json_hash
      _h = super
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      return _h
    end

    #initializes this MDN_UserSetting with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push String.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
    end

    # constructs a MDN_UserSetting from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end
